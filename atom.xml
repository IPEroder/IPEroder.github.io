<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Little Programmer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iperoder.github.io/"/>
  <updated>2018-12-01T09:28:00.588Z</updated>
  <id>http://iperoder.github.io/</id>
  
  <author>
    <name>Zurich</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>programm_normalization_C#</title>
    <link href="http://iperoder.github.io/en/2018/12/01/programm-normalization-C/"/>
    <id>http://iperoder.github.io/en/2018/12/01/programm-normalization-C/</id>
    <published>2018-12-01T09:25:54.000Z</published>
    <updated>2018-12-01T09:28:00.588Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 类级单位的命名 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 类级单位的命名 &lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>信息系统分析与设计</title>
    <link href="http://iperoder.github.io/en/2018/12/01/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    <id>http://iperoder.github.io/en/2018/12/01/信息系统分析与设计/</id>
    <published>2018-12-01T04:54:56.731Z</published>
    <updated>2018-12-01T09:21:16.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件系统的开发阶段"><a href="#软件系统的开发阶段" class="headerlink" title="软件系统的开发阶段"></a><center>软件系统的开发阶段</center></h2><pre><code>1. 可行性分析2. 需求分析3. 系统设计（概要设计，详细设计）4. 程序开发5. 编码6. 单元测试7. 系统测试8. 系统维护</code></pre><h3 id="可行性分析"><a href="#可行性分析" class="headerlink" title="可行性分析"></a>可行性分析</h3><p>明确系统的目的、功能和要求，了解目前所具备的饿开发环境和条件</p><pre><code>1. 在技术能力上是否可以支持2. 在经济上效益如何3. 在法律上是否符合要求4. 与部门、企业的经营和发展是否吻合5. 系统投入运行后的维护有无障碍</code></pre><p>可行性讨论的目的是判定系统的开发有无价值，讨论的结果会形成项目开发计划书</p><pre><code>1. 开发的目的及所期待的效果2. 系统的基本设想，涉及的业务对象和范围3. 开发进度表，开发组织结构4. 开发，运行的费用5. 预期的系统效益6. 开发过程中可能遇到的问题及注意事项</code></pre><p>可行性研究报告是可行性分析的阶段软件文档管理的标准化文档</p><h3 id="系统需求分析"><a href="#系统需求分析" class="headerlink" title="系统需求分析"></a>系统需求分析</h3><p>系统需求分析是系统软件开发中最重要的一个阶段，直接决定这系统的开发质量和成败，必须明确用户的要求和应用现场环境的特点，了解系统应具有哪些功能及数据的流程和数据之间的联系。需求分析应有用户参加，到使用现场进行调研学习，最终形成需求需求分析规格说明书</p><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><ul><li>概要设计<ol><li>划分系统模块</li><li>每个模块的功能确定</li><li>用户使用界面的概要设计</li><li>输入、输出数据的概要设计</li><li>报表概要设计</li><li>数据之间的联系、流程分析 </li><li>文件和数据库表的逻辑设计</li><li>硬件、软件开发平台的确定</li><li>有规律数据的规范化及数据唯一性要求</li></ol></li><li>详细设计，形成软件系详细设计说明书<ol><li>文件和数据库的物理设计</li><li>输入、输出记录的方案记录</li><li>对各子系统的处理方式和处理内容的规范化</li><li>编制程序设计任务书</li></ol></li></ul><h3 id="程序开发"><a href="#程序开发" class="headerlink" title="程序开发"></a>程序开发</h3><ul><li>根据程序设计任务书的要求，用计算机算法语言实现解题的步骤<ol><li>模块的理解和进一步划分</li><li>以模块为单位的逻辑设计，就是模块内的流程图的编制</li><li>编写代码，用程序设计语言编制程序</li><li>进行模块内功能的测试、单元测试</li></ol></li><li>程序质量的要求包括以下五个方面<ol><li>满足要求的确切性</li><li>处理效率高</li><li>操作方便、用户界面友好</li><li>程序代码的可读性好，函数、变量标识符合规范</li><li>扩充性、维护性好</li></ol></li></ul><p>降低程序的复杂性也是十分重要的。系统的复杂性由模块间的接口数量来衡定。一般来讲，n个模块接口数量为n(n-1)/2；若是层次结构，n个模块的接口数量为n-1个，为使复杂性降低，对模块的划分常常采用层次结构</p><h3 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h3><ul><li>测试是为了发现程序中的错误，对于设计的软件，出现错误是难免的，系统测试通常有经验丰富的设计人员设计测试方案和测试样品，并写出测试过程中的详细报告。系统测试是在单元测试的基础上进行的，包括以下<ol><li>测试方案的设计</li><li>进行测试</li><li>写出测试报告</li><li>用户对测试结果进行评价</li></ol></li><li>测试过程<ol><li>模块测试</li><li>子系统测试</li><li>系统测试</li><li>验收测试</li></ol></li></ul><p>软件测试通常使用黑盒法和白盒法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件系统的开发阶段&quot;&gt;&lt;a href=&quot;#软件系统的开发阶段&quot; class=&quot;headerlink&quot; title=&quot;软件系统的开发阶段&quot;&gt;&lt;/a&gt;&lt;center&gt;软件系统的开发阶段&lt;/center&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 可行性分析
2. 需求分析

      
    
    </summary>
    
    
      <category term="系统设计" scheme="http://iperoder.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>DOM学习笔记</title>
    <link href="http://iperoder.github.io/en/2018/09/30/DOM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://iperoder.github.io/en/2018/09/30/DOM学习笔记/</id>
    <published>2018-09-30T02:15:34.455Z</published>
    <updated>2018-12-01T09:22:56.325Z</updated>
    
    <content type="html"><![CDATA[<p><center>DOM(文档对象模型) 学习笔记（针对任何结构化文档的标准模型）</center></p><h2 id="XML-DOM"><a href="#XML-DOM" class="headerlink" title="XML DOM"></a>XML DOM</h2><h2 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h2><pre><code>- 整个文档是一个文档节点- 每个HT(X)ML元素是元素节点- (HT)XML元素中的文本是文本节点(元素不包括文本内容，包括的是文本节点)- 每个(HT)XM属性是属性节点- 注释是注释节点</code></pre><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><pre><code>- parent node(父节点)- child node(子节点)- sibling node(同胞节点)</code></pre><p>HTML DOM 方法<br>    getElementById(id)<br>    getElementByTagName(tag)//返回的是该文档中所有包含该标签的列表<br>    getElementByClassName(class)<br>    appendChild(node)<br>    replaceChild(new_node,target_node)<br>    removeChild(node)<br>    insertBefore(new_node, pos_node)<br>    createElement()<br>    createTextNode()<br>    getAttribute()<br>    setAttribute()</p><h2 id="获取文本内容的方法"><a href="#获取文本内容的方法" class="headerlink" title="获取文本内容的方法"></a>获取文本内容的方法</h2><ul><li>x = document.getElementById(“intro”).innerHTML</li><li>x = document.getElementById(“intro”).firstChild.nodeValue<h2 id="删除一个未知该元素父节点的节点的方法"><a href="#删除一个未知该元素父节点的节点的方法" class="headerlink" title="删除一个未知该元素父节点的节点的方法"></a>删除一个未知该元素父节点的节点的方法</h2></li><li><p>var child = document.getElementById(“intro”);<br>child.parentNode.removeChild(child);</p><h2 id="创建一个新节点"><a href="#创建一个新节点" class="headerlink" title="创建一个新节点"></a>创建一个新节点</h2><p>var para = document.createElement(‘p’);<br>var node = document.createTextNode(“this is my name”);<br>para.appendChild(node);//新节点创建成功</p><p>var element = document.getElementById(“div1”);//搜索要插入的位置父节点<br>element.appendChild(para);//插在该节点下的lastNode位置</p><h2 id="改变文本内容或者HTML样式"><a href="#改变文本内容或者HTML样式" class="headerlink" title="改变文本内容或者HTML样式"></a>改变文本内容或者HTML样式</h2><p>document.getElementById(‘p’).innerHTML=”dist”;<br>document.getElementById(‘p’).style.color=’red’;</p><h2 id="事件发生时执行代码"><a href="#事件发生时执行代码" class="headerlink" title="事件发生时执行代码"></a>事件发生时执行代码</h2><p>(onclick时)<input type="button"> onclick=”document.body.style.backgroundColor=’lavender’;” value=”Change background color” /&gt;</p><h2 id="使用javascript向html元素分配事件"><a href="#使用javascript向html元素分配事件" class="headerlink" title="使用javascript向html元素分配事件"></a>使用javascript向html元素分配事件</h2><p><button id="myBtn">Try it</button><br><script><br>document.getElementById(“myBtn”).onclick=function(){displayDate()};<br>function displayDate(){<br>document.getElementById(“demo”).innerHTML=Date();}<br></script><br></p><p id="demo"></p><p></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>onload</li><li>onunload</li><li>onchange (input属性中的text元素可以直接使用t.value来获得)</li><li>onmouseover(运用this 指针来指代该元素节点)</li><li>onmouseout</li><li>onmousedown</li><li>onmouseup<h2 id="HTML-属性"><a href="#HTML-属性" class="headerlink" title="HTML 属性"></a>HTML 属性</h2>innerHTML -节点元素的文本值<br>parentNode -节点元素的父节点<br>childNode - 节点元素的子节点<br>attributes - 节点元素的属性节点<br>nodeName 规定节点的名称</li><li>元素节点 与标签名相同</li><li>属性节点 与属性名相同</li><li>文本节点 #text</li><li>文档节点 #document<br>nodeValue 规定节点的值</li><li>元素节点 undefined 或null</li><li>文本节点 文本本身</li><li>属性节点 属性值<br>nodeType 返回节点的类型(只读)<br>元素 1<br>属性值 2<br>文本 3<br>注释 8<br>文档 9</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;center&gt;DOM(文档对象模型) 学习笔记（针对任何结构化文档的标准模型）&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&quot;XML-DOM&quot;&gt;&lt;a href=&quot;#XML-DOM&quot; class=&quot;headerlink&quot; title=&quot;XML DOM&quot;&gt;&lt;/a&gt;XML DOM&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tensorflow_first</title>
    <link href="http://iperoder.github.io/en/2018/08/23/tensorflow-first/"/>
    <id>http://iperoder.github.io/en/2018/08/23/tensorflow-first/</id>
    <published>2018-08-23T12:10:48.000Z</published>
    <updated>2018-12-01T09:20:08.154Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Tendorflow" scheme="http://iperoder.github.io/tags/Tendorflow/"/>
    
  </entry>
  
  <entry>
    <title>My new Blog</title>
    <link href="http://iperoder.github.io/en/2018/08/18/MyFirstBlog/"/>
    <id>http://iperoder.github.io/en/2018/08/18/MyFirstBlog/</id>
    <published>2018-08-18T13:56:02.550Z</published>
    <updated>2018-08-23T12:15:24.441Z</updated>
    
    <content type="html"><![CDATA[<p>Due to my ignoration, my first hexo blog Zurichcape.github.io was lost, So I rebuild a blog and record my coding,programming life.</p><h2 id="I-am-just-a-green-man-in-this-field"><a href="#I-am-just-a-green-man-in-this-field" class="headerlink" title="I am just a green man in this field."></a>I am just a green man in this field.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Due to my ignoration, my first hexo blog Zurichcape.github.io was lost, So I rebuild a blog and record my coding,programming life.&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
  </entry>
  
</feed>
